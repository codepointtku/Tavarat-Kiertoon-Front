openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /bikes/:
    get:
      operationId: bikes_list
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MainBikeListSchema'
          description: ''
  /bikes/models/:
    get:
      operationId: bikes_models_list
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BikeModel'
          description: ''
    post:
      operationId: bikes_models_create
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeModelCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BikeModelCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BikeModelCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeModelCreate'
          description: ''
  /bikes/models/{id}/:
    get:
      operationId: bikes_models_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeModel'
          description: ''
    put:
      operationId: bikes_models_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeModelCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BikeModelCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BikeModelCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeModelCreate'
          description: ''
    patch:
      operationId: bikes_models_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBikeModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBikeModel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBikeModel'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeModel'
          description: ''
    delete:
      operationId: bikes_models_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /bikes/packageamounts/:
    get:
      operationId: bikes_packageamounts_list
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BikeAmountList'
          description: ''
  /bikes/packages/:
    get:
      operationId: bikes_packages_list
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BikePackage'
          description: ''
    post:
      operationId: bikes_packages_create
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikePackage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BikePackage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BikePackage'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikePackage'
          description: ''
  /bikes/packages/{id}/:
    get:
      operationId: bikes_packages_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikePackage'
          description: ''
    put:
      operationId: bikes_packages_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikePackage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BikePackage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BikePackage'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikePackage'
          description: ''
    patch:
      operationId: bikes_packages_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBikePackage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBikePackage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBikePackage'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikePackage'
          description: ''
    delete:
      operationId: bikes_packages_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /bikes/rental/:
    get:
      operationId: bikes_rental_list
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BikeRental'
          description: ''
    post:
      operationId: bikes_rental_create
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeRentalSchemaPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BikeRentalSchemaPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BikeRentalSchemaPost'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeRental'
          description: ''
  /bikes/rental/{id}/:
    get:
      operationId: bikes_rental_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeRental'
          description: ''
  /bikes/stock/:
    get:
      operationId: bikes_stock_list
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BikeStockList'
          description: ''
    post:
      operationId: bikes_stock_create
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeStockCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BikeStockCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BikeStockCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeStockCreate'
          description: ''
  /bikes/stock/{id}/:
    get:
      operationId: bikes_stock_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeStockDetail'
          description: ''
    put:
      operationId: bikes_stock_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BikeStockCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BikeStockCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BikeStockCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeStockCreate'
          description: ''
    patch:
      operationId: bikes_stock_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBikeStockDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedBikeStockDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBikeStockDetail'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeStockDetail'
          description: ''
    delete:
      operationId: bikes_stock_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bikes
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /bulletins/:
    get:
      operationId: bulletins_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - bulletins
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BulletinResponse'
          description: ''
    post:
      operationId: bulletins_create
      tags:
      - bulletins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bulletin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bulletin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bulletin'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulletinResponse'
          description: ''
  /bulletins/{id}:
    get:
      operationId: bulletins_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bulletins
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulletinResponse'
          description: ''
    put:
      operationId: bulletins_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bulletins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bulletin'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bulletin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Bulletin'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulletinResponse'
          description: ''
    delete:
      operationId: bulletins_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - bulletins
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /categories/:
    get:
      operationId: categories_list
      tags:
      - categories
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
          description: ''
    post:
      operationId: categories_create
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
          description: ''
  /categories/{id}/:
    get:
      operationId: categories_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - categories
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
          description: ''
    put:
      operationId: categories_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
          description: ''
    delete:
      operationId: categories_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - categories
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /categories/tree/:
    get:
      operationId: categories_tree_retrieve
      description: Returns all category ids as keys and all level 2 child categories
        of that category as list
      tags:
      - categories
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryTree'
              examples:
                Example1:
                  value:
                    '1':
                    - 3
                    - 4
                    - 6
                    - 7
                    '2':
                    - 3
                    - 4
                    '3':
                    - 3
                    '4':
                    - 4
                    '5':
                    - 6
                    - 7
                    '6':
                    - 6
                    '7':
                    - 7
                    '8':
                    - 10
                    '9':
                    - 10
                    '10':
                    - 10
                  summary: Example 1
                  description: Keys are category ids, and values are list of all lvl
                    2 child category ids of that category
          description: ''
  /colors/:
    get:
      operationId: colors_list
      tags:
      - colors
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Color'
          description: ''
    post:
      operationId: colors_create
      tags:
      - colors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Color'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Color'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Color'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
  /colors/{id}/:
    get:
      operationId: colors_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - colors
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
    put:
      operationId: colors_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - colors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Color'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Color'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Color'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
    patch:
      operationId: colors_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - colors
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedColor'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedColor'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedColor'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
          description: ''
    delete:
      operationId: colors_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - colors
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /contact_forms/:
    get:
      operationId: contact_forms_list
      tags:
      - contact_forms
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContactFormResponse'
          description: ''
    post:
      operationId: contact_forms_create
      tags:
      - contact_forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContactForm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContactForm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactFormResponse'
          description: ''
  /contact_forms/{id}/:
    get:
      operationId: contact_forms_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contact_forms
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactFormResponse'
          description: ''
    put:
      operationId: contact_forms_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contact_forms
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactForm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ContactForm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContactForm'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactFormResponse'
          description: ''
    delete:
      operationId: contact_forms_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contact_forms
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /contacts/:
    get:
      operationId: contacts_list
      tags:
      - contacts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
          description: ''
    post:
      operationId: contacts_create
      tags:
      - contacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
  /contacts/{id}:
    get:
      operationId: contacts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contacts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
    put:
      operationId: contacts_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contacts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Contact'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
          description: ''
    delete:
      operationId: contacts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - contacts
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /orders/:
    get:
      operationId: orders_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - Delivery
          - Finished
          - Waiting
        description: |-
          * `Waiting` - Waiting
          * `Delivery` - Delivery
          * `Finished` - Finished
      tags:
      - orders
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrderResponseList'
          description: ''
    post:
      operationId: orders_create
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
          description: ''
  /orders/{id}/:
    get:
      operationId: orders_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailResponse'
          description: ''
    put:
      operationId: orders_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrderDetailRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetailResponse'
          description: ''
    delete:
      operationId: orders_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - orders
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /orders/user/:
    get:
      operationId: orders_user_list
      description: View for returning logged in users own orders
      tags:
      - orders
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDetailResponse'
          description: ''
  /pictures/:
    get:
      operationId: pictures_list
      tags:
      - pictures
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Picture'
          description: ''
    post:
      operationId: pictures_create
      tags:
      - pictures
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Picture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Picture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Picture'
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
          description: ''
  /pictures/{id}/:
    get:
      operationId: pictures_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pictures
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
          description: ''
    put:
      operationId: pictures_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pictures
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Picture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Picture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Picture'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
          description: ''
    patch:
      operationId: pictures_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pictures
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPicture'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPicture'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPicture'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Picture'
          description: ''
    delete:
      operationId: pictures_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - pictures
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /products/:
    get:
      operationId: products_list
      parameters:
      - in: query
        name: category
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: color
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search
      tags:
      - products
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductListList'
          description: ''
  /products/{id}/:
    get:
      operationId: products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
          description: ''
    put:
      operationId: products_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdate'
          description: ''
    delete:
      operationId: products_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - products
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /products/transfer/:
    put:
      operationId: products_transfer_update
      description: View for transfering list of products to different storage
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductStorageTransfer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductStorageTransfer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductStorageTransfer'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
  /schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /shopping_cart/:
    get:
      operationId: shopping_cart_retrieve
      tags:
      - shopping_cart
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDetail'
          description: ''
    put:
      operationId: shopping_cart_update
      tags:
      - shopping_cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCartDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShoppingCartDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShoppingCartDetailRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDetail'
          description: ''
  /shopping_cart/available_amount/:
    get:
      operationId: shopping_cart_available_amount_list
      description: View for last step of modifying products in shopping cart before
        ordering
      tags:
      - shopping_cart
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingCartAvailableAmountList'
          description: ''
  /shopping_carts/:
    get:
      operationId: shopping_carts_list
      tags:
      - shopping_carts
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingCartResponse'
          description: ''
    post:
      operationId: shopping_carts_create
      tags:
      - shopping_carts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCart'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShoppingCart'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShoppingCart'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartResponse'
          description: ''
  /storage/products/:
    get:
      operationId: storage_products_list
      parameters:
      - in: query
        name: category
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - in: query
        name: color
        schema:
          type: array
          items:
            type: integer
        explode: true
        style: form
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: search
        schema:
          type: string
        description: Search
      tags:
      - storage
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductStorageListList'
          description: ''
    post:
      operationId: storage_products_create
      tags:
      - storage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProductCreation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProductCreation'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
          description: ''
  /storages/:
    get:
      operationId: storages_list
      tags:
      - storages
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storage'
          description: ''
    post:
      operationId: storages_create
      tags:
      - storages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Storage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Storage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Storage'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
          description: ''
  /storages/{id}/:
    get:
      operationId: storages_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - storages
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
          description: ''
    put:
      operationId: storages_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - storages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Storage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Storage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Storage'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
          description: ''
    patch:
      operationId: storages_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - storages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStorage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStorage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStorage'
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
          description: ''
    delete:
      operationId: storages_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - storages
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /user/:
    get:
      operationId: user_retrieve
      description: Get logged in users info
      tags:
      - user
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFullResponseSchema'
          description: ''
  /user/address/edit/:
    get:
      operationId: user_address_edit_list
      description: Get list of all addresss logged in user has, and edit them
      tags:
      - user
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAddress'
          description: ''
    post:
      operationId: user_address_edit_create
      description: Get list of all addresss logged in user has, and edit them
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressPostRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressPostRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressPostRequest'
        required: true
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    put:
      operationId: user_address_edit_update
      description: Get list of all addresss logged in user has, and edit them
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddressPutRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddressPutRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddressPutRequest'
        required: true
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
  /user/address/edit/{id}/delete/:
    delete:
      operationId: user_address_edit_delete_destroy
      description: Delete the specific address given in kwargs. address needs to match
        logged in user id as owner
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user
      security:
      - CustomJWTAuthentication: []
      responses:
        '204':
          description: No response body
  /user/edit/:
    get:
      operationId: user_edit_retrieve
      description: |-
        Get logged in users information and update it.
        only fields that can be changed.
      tags:
      - user
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateReturnSchema'
          description: ''
    put:
      operationId: user_edit_update
      description: |-
        Get logged in users information and update it.
        only fields that can be changed.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateReturnSchema'
          description: ''
  /users/:
    get:
      operationId: users_list
      description: List all users with all database fields, no POST here
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserFullResponseSchema'
          description: ''
  /users/{id}/:
    get:
      operationId: users_retrieve
      description: Get single user with all database fields, no POST here
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFullResponseSchema'
          description: ''
  /users/{id}/edit/:
    get:
      operationId: users_edit_retrieve
      description: Get specific users info for updating, field that can be updated
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateReturnSchema'
          description: ''
    put:
      operationId: users_edit_update
      description: Get specific users info for updating, field that can be updated
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateReturnSchema'
          description: ''
  /users/{id}/groups/permission/:
    get:
      operationId: users_groups_permission_retrieve
      description: |-
        Update users permissions, should be only allowed to admins, on testing phase allowing fo users
        id = user id whose permission will be updated as id/pk parameter in url
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPermissionsResponseSchema'
          description: ''
    put:
      operationId: users_groups_permission_update
      description: |-
        Update users permissions, should be only allowed to admins, on testing phase allowing fo users
        id = user id whose permission will be updated as id/pk parameter in url
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupPermissions'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupPermissions'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupPermissions'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPermissionsResponseSchema'
          description: ''
  /users/activate/:
    post:
      operationId: users_activate_create
      description: view for user activation. front passess the uid and token that
        gets validated and then user gets activated.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTokenValidation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserTokenValidation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserTokenValidation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /users/address/{id}/:
    get:
      operationId: users_address_retrieve
      description: |-
        Get specific address by id and do update/destroy/ to it
        For use of admins only
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    put:
      operationId: users_address_update
      description: |-
        Get specific address by id and do update/destroy/ to it
        For use of admins only
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAddress'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAddress'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAddress'
        required: true
      security:
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
          description: ''
    delete:
      operationId: users_address_destroy
      description: |-
        Get specific address by id and do update/destroy/ to it
        For use of admins only
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - CustomJWTAuthentication: []
      responses:
        '204':
          description: No response body
  /users/create/:
    post:
      operationId: users_create_create
      description: List all users, and create with POST
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateReturnResponseSchema'
          description: ''
  /users/groups/:
    get:
      operationId: users_groups_list
      description: Get group names in list
      tags:
      - users
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - CustomJWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupName'
          description: ''
  /users/login/:
    post:
      operationId: users_login_create
      description: Login with jwt token and as http only cookie
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginPost'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLoginPost'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserLoginPost'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersLoginRefreshResponseSchema'
          description: ''
  /users/login/refresh/:
    post:
      operationId: users_login_refresh_create
      description: Takes refresh token from cookies and if its valid sets new access
        token to cookies
      tags:
      - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersLoginRefreshResponseSchema'
          description: ''
  /users/logout/:
    post:
      operationId: users_logout_create
      description: Logs out the user and (flush session just in case, mainly for use
        in testing at back)
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /users/password/reset/:
    post:
      operationId: users_password_reset_create
      description: |-
        View that handless the password reset producre and updates the pw.
        needs the uid and user token created in UserPasswordResetMailView.
        Also activates the user if for some reason its been activated or needs to bew reactivated.
        the 'uidb64'/'token' variant and GET method is only for testing and should not be used in deployment so DO NOT USE
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordChangeEmailValidation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPasswordChangeEmailValidation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPasswordChangeEmailValidation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /users/password/reset/{uidb64}/{token}/:
    post:
      operationId: users_password_reset_create_2
      description: |-
        View that handless the password reset producre and updates the pw.
        needs the uid and user token created in UserPasswordResetMailView.
        Also activates the user if for some reason its been activated or needs to bew reactivated.
        the 'uidb64'/'token' variant and GET method is only for testing and should not be used in deployment so DO NOT USE
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      - in: path
        name: uidb64
        schema:
          type: string
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordChangeEmailValidation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPasswordChangeEmailValidation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPasswordChangeEmailValidation'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /users/password/resetemail/:
    post:
      operationId: users_password_resetemail_create
      description: View used to send the reset email to users email address when requested.
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordCheckEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserPasswordCheckEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPasswordCheckEmail'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
components:
  schemas:
    BikeAmount:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        bike:
          type: integer
      required:
      - amount
      - bike
    BikeAmountList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        amount:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        bike:
          type: integer
        package:
          type: integer
      required:
      - amount
      - bike
      - id
      - package
    BikeBrand:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    BikeModel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/BikeType'
          readOnly: true
        brand:
          allOf:
          - $ref: '#/components/schemas/BikeBrand'
          readOnly: true
        size:
          allOf:
          - $ref: '#/components/schemas/BikeSize'
          readOnly: true
        color:
          allOf:
          - $ref: '#/components/schemas/Color'
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
      required:
      - brand
      - color
      - description
      - id
      - name
      - size
      - type
    BikeModelCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        type:
          type: integer
          nullable: true
        brand:
          type: integer
          nullable: true
        size:
          type: integer
          nullable: true
        color:
          type: integer
          nullable: true
      required:
      - description
      - id
      - name
    BikePackage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        bikes:
          type: array
          items:
            $ref: '#/components/schemas/BikeAmount'
      required:
      - bikes
      - description
      - id
      - name
    BikeRental:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/State28bEnum'
        delivery_address:
          type: string
          maxLength: 255
        pickup:
          type: boolean
        contact_name:
          type: string
          maxLength: 255
        contact_phone_number:
          type: string
          maxLength: 255
        extra_info:
          type: string
          maxLength: 255
        user:
          type: integer
          nullable: true
        bike_stock:
          type: array
          items:
            type: integer
      required:
      - bike_stock
      - contact_name
      - contact_phone_number
      - delivery_address
      - end_date
      - id
      - start_date
    BikeRentalSchemaPost:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bike_stock:
          type: object
          additionalProperties:
            type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/State28bEnum'
        delivery_address:
          type: string
          maxLength: 255
        pickup:
          type: boolean
        contact_name:
          type: string
          maxLength: 255
        contact_phone_number:
          type: string
          maxLength: 255
        extra_info:
          type: string
          maxLength: 255
        user:
          type: integer
          nullable: true
      required:
      - bike_stock
      - contact_name
      - contact_phone_number
      - delivery_address
      - end_date
      - id
      - start_date
    BikeSize:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    BikeStockCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        package_only:
          type: boolean
        number:
          type: string
          maxLength: 255
        frame_number:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        state:
          $ref: '#/components/schemas/State6acEnum'
        bike:
          type: integer
        storage:
          type: integer
      required:
      - bike
      - created_at
      - frame_number
      - id
      - number
      - storage
    BikeStockDepth:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/BikeType'
          readOnly: true
        brand:
          allOf:
          - $ref: '#/components/schemas/BikeBrand'
          readOnly: true
        size:
          allOf:
          - $ref: '#/components/schemas/BikeSize'
          readOnly: true
        color:
          allOf:
          - $ref: '#/components/schemas/Color'
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
      required:
      - brand
      - color
      - description
      - id
      - name
      - size
      - type
    BikeStockDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bike:
          allOf:
          - $ref: '#/components/schemas/BikeStockDepth'
          readOnly: true
        storage:
          allOf:
          - $ref: '#/components/schemas/Storage'
          readOnly: true
        package_only:
          type: boolean
        number:
          type: string
          maxLength: 255
        frame_number:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        state:
          $ref: '#/components/schemas/State6acEnum'
      required:
      - bike
      - created_at
      - frame_number
      - id
      - number
      - storage
    BikeStockList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bike:
          allOf:
          - $ref: '#/components/schemas/BikeStockDepth'
          readOnly: true
        package_only:
          type: boolean
        number:
          type: string
          maxLength: 255
        frame_number:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        state:
          $ref: '#/components/schemas/State6acEnum'
        storage:
          type: integer
      required:
      - bike
      - created_at
      - frame_number
      - id
      - number
      - storage
    BikeType:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    Bulletin:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        content:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        author:
          type: integer
          nullable: true
      required:
      - content
      - date
      - id
      - title
    BulletinResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        content:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        author:
          type: integer
          nullable: true
      required:
      - author
      - content
      - date
      - id
      - title
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_count:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        lft:
          type: integer
          readOnly: true
        rght:
          type: integer
          readOnly: true
        tree_id:
          type: integer
          readOnly: true
        level:
          type: integer
          readOnly: true
        parent:
          type: integer
          nullable: true
      required:
      - id
      - level
      - lft
      - name
      - product_count
      - rght
      - tree_id
    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product_count:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        lft:
          type: integer
          readOnly: true
        rght:
          type: integer
          readOnly: true
        tree_id:
          type: integer
          readOnly: true
        level:
          type: integer
          readOnly: true
        parent:
          type: integer
          nullable: true
      required:
      - id
      - level
      - lft
      - name
      - parent
      - product_count
      - rght
      - tree_id
    CategoryTree:
      type: object
      properties:
        category_id:
          type: array
          items:
            type: integer
            readOnly: true
      required:
      - category_id
    Color:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    Contact:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        address:
          type: string
          maxLength: 255
        email:
          type: string
          maxLength: 255
        phone_number:
          type: string
          maxLength: 100
      required:
      - address
      - email
      - id
      - name
      - phone_number
    ContactForm:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          maxLength: 255
        subject:
          type: string
          maxLength: 255
        message:
          type: string
        order_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        date:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
      required:
      - date
      - email
      - id
      - message
      - name
      - subject
    ContactFormResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          maxLength: 255
        subject:
          type: string
          maxLength: 255
        message:
          type: string
        order_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        date:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
      required:
      - date
      - email
      - id
      - message
      - name
      - order_id
      - status
      - subject
    GroupName:
      type: object
      description: Serializer for Groups
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
      required:
      - id
      - name
    GroupPermissions:
      type: object
      properties:
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
    GroupPermissionsResponseSchema:
      type: object
      description: FOR SCHEMA
      properties:
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
      required:
      - groups
    MainBikeListSchema:
      type: object
      properties:
        date_info:
          $ref: '#/components/schemas/MainBikeSchemaDate'
        bikes:
          type: array
          items:
            $ref: '#/components/schemas/MainBikeSchemaBikes'
        packages:
          type: array
          items:
            $ref: '#/components/schemas/MainBikeSchemaPackage'
      required:
      - bikes
      - date_info
      - packages
    MainBikeSchemaBikes:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        max_available:
          type: integer
        description:
          type: string
        type:
          type: string
        brand:
          type: string
        size:
          type: string
        color:
          type: integer
        unavailable:
          type: object
          additionalProperties:
            type: integer
        package_only_count:
          type: integer
        package_only_unavailable:
          type: object
          additionalProperties:
            type: integer
      required:
      - brand
      - color
      - description
      - id
      - max_available
      - name
      - package_only_count
      - package_only_unavailable
      - size
      - type
      - unavailable
    MainBikeSchemaDate:
      type: object
      properties:
        available_from:
          type: string
          format: date
        available_to:
          type: string
          format: date
      required:
      - available_from
      - available_to
    MainBikeSchemaPackage:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        bikes:
          type: array
          items:
            $ref: '#/components/schemas/MainBikeSchemaPackageBike'
        type:
          type: string
        unavailable:
          type: object
          additionalProperties:
            type: integer
        brand:
          type: integer
        color:
          type: integer
        size:
          type: string
        max_available:
          type: integer
      required:
      - bikes
      - brand
      - color
      - description
      - id
      - max_available
      - name
      - size
      - type
      - unavailable
    MainBikeSchemaPackageBike:
      type: object
      properties:
        bike:
          type: integer
        amount:
          type: integer
      required:
      - amount
      - bike
    Message:
      type: object
      properties:
        message:
          type: string
          maxLength: 255
      required:
      - message
    OrderDetailRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          type: string
          maxLength: 255
        delivery_address:
          type: string
          maxLength: 255
        contact:
          type: string
          maxLength: 255
        order_info:
          type: string
        delivery_date:
          type: string
          format: date-time
          nullable: true
        phone_number:
          type: string
          maxLength: 255
        creation_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
      required:
      - contact
      - creation_date
      - delivery_address
      - id
      - phone_number
      - products
      - status
    OrderDetailResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
        status:
          type: string
          maxLength: 255
        delivery_address:
          type: string
          maxLength: 255
        contact:
          type: string
          maxLength: 255
        order_info:
          type: string
        delivery_date:
          type: string
          format: date-time
          nullable: true
        phone_number:
          type: string
          maxLength: 255
        creation_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - contact
      - creation_date
      - delivery_address
      - delivery_date
      - id
      - order_info
      - phone_number
      - products
      - status
      - user
    OrderRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          type: string
          maxLength: 255
        delivery_address:
          type: string
          maxLength: 255
        contact:
          type: string
          maxLength: 255
        order_info:
          type: string
        delivery_date:
          type: string
          format: date-time
          nullable: true
        phone_number:
          type: string
          maxLength: 255
        creation_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - contact
      - creation_date
      - delivery_address
      - id
      - phone_number
      - status
      - user
    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        status:
          type: string
          maxLength: 255
        delivery_address:
          type: string
          maxLength: 255
        contact:
          type: string
          maxLength: 255
        order_info:
          type: string
        delivery_date:
          type: string
          format: date-time
          nullable: true
        phone_number:
          type: string
          maxLength: 255
        creation_date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
      required:
      - contact
      - creation_date
      - delivery_address
      - delivery_date
      - id
      - order_info
      - phone_number
      - products
      - status
      - user
    PaginatedOrderResponseList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
    PaginatedProductListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductList'
    PaginatedProductStorageListList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ProductStorageList'
    PatchedBikeModel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        type:
          allOf:
          - $ref: '#/components/schemas/BikeType'
          readOnly: true
        brand:
          allOf:
          - $ref: '#/components/schemas/BikeBrand'
          readOnly: true
        size:
          allOf:
          - $ref: '#/components/schemas/BikeSize'
          readOnly: true
        color:
          allOf:
          - $ref: '#/components/schemas/Color'
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
    PatchedBikePackage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          maxLength: 255
        bikes:
          type: array
          items:
            $ref: '#/components/schemas/BikeAmount'
    PatchedBikeStockDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        bike:
          allOf:
          - $ref: '#/components/schemas/BikeStockDepth'
          readOnly: true
        storage:
          allOf:
          - $ref: '#/components/schemas/Storage'
          readOnly: true
        package_only:
          type: boolean
        number:
          type: string
          maxLength: 255
        frame_number:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        state:
          $ref: '#/components/schemas/State6acEnum'
    PatchedColor:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
    PatchedPicture:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        picture_address:
          type: string
          readOnly: true
    PatchedStorage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        address:
          type: string
          maxLength: 255
        in_use:
          type: boolean
    Picture:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        picture_address:
          type: string
          readOnly: true
      required:
      - id
      - picture_address
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category_name:
          type: string
          readOnly: true
        color_name:
          type: string
          readOnly: true
        storage_name:
          type: string
          readOnly: true
        pictures:
          type: array
          items:
            $ref: '#/components/schemas/Picture'
          readOnly: true
        available:
          type: boolean
        barcode:
          type: string
          maxLength: 255
        group_id:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: double
        shelf_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        free_description:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        modified_date:
          type: string
          format: date-time
        measurements:
          type: string
          maxLength: 50
        weight:
          type: number
          format: double
        category:
          type: integer
          nullable: true
        storages:
          type: integer
          nullable: true
        color:
          type: integer
          nullable: true
      required:
      - category_name
      - color_name
      - date
      - id
      - name
      - pictures
      - storage_name
    ProductColorString:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        amount:
          type: integer
        color:
          type: string
        pictures:
          type: string
          format: uri
        available:
          type: boolean
        barcode:
          type: string
          maxLength: 255
        group_id:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: double
        shelf_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        free_description:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        modified_date:
          type: string
          format: date-time
        measurements:
          type: string
          maxLength: 50
        weight:
          type: number
          format: double
        category:
          type: integer
          nullable: true
        storages:
          type: integer
          nullable: true
      required:
      - amount
      - available
      - barcode
      - category
      - color
      - date
      - id
      - name
      - pictures
      - storages
    ProductCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        amount:
          type: integer
        pictures:
          type: string
          format: uri
        color:
          type: integer
        available:
          type: boolean
        barcode:
          type: string
          maxLength: 255
        group_id:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: double
        shelf_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        free_description:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        modified_date:
          type: string
          format: date-time
        measurements:
          type: string
          maxLength: 50
        weight:
          type: number
          format: double
        category:
          type: integer
          nullable: true
        storages:
          type: integer
          nullable: true
      required:
      - amount
      - available
      - barcode
      - category
      - color
      - date
      - id
      - name
      - pictures
      - storages
    ProductCreation:
      oneOf:
      - $ref: '#/components/schemas/ProductCreate'
      - $ref: '#/components/schemas/ProductColorString'
      discriminator:
        propertyName: color
        mapping:
          ProductCreate: '#/components/schemas/ProductCreate'
          None: '#/components/schemas/ProductColorString'
    ProductList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category_name:
          type: string
          readOnly: true
        color_name:
          type: string
          readOnly: true
        storage_name:
          type: string
          readOnly: true
        pictures:
          type: array
          items:
            $ref: '#/components/schemas/Picture'
          readOnly: true
        amount:
          type: integer
        available:
          type: boolean
        barcode:
          type: string
          maxLength: 255
        group_id:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: double
        shelf_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        free_description:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        modified_date:
          type: string
          format: date-time
        measurements:
          type: string
          maxLength: 50
        weight:
          type: number
          format: double
        category:
          type: integer
          nullable: true
        storages:
          type: integer
          nullable: true
        color:
          type: integer
          nullable: true
      required:
      - amount
      - available
      - barcode
      - category
      - category_name
      - color
      - color_name
      - date
      - free_description
      - group_id
      - id
      - measurements
      - modified_date
      - name
      - pictures
      - price
      - shelf_id
      - storage_name
      - storages
      - weight
    ProductStorageList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        category_name:
          type: string
          readOnly: true
        color_name:
          type: string
          readOnly: true
        storage_name:
          type: string
          readOnly: true
        pictures:
          type: array
          items:
            $ref: '#/components/schemas/Picture'
          readOnly: true
        available:
          type: boolean
        barcode:
          type: string
          maxLength: 255
        group_id:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: double
        shelf_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        free_description:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        modified_date:
          type: string
          format: date-time
        measurements:
          type: string
          maxLength: 50
        weight:
          type: number
          format: double
        category:
          type: integer
          nullable: true
        storages:
          type: integer
          nullable: true
        color:
          type: integer
          nullable: true
      required:
      - available
      - barcode
      - category
      - category_name
      - color
      - color_name
      - date
      - free_description
      - group_id
      - id
      - measurements
      - modified_date
      - name
      - pictures
      - price
      - shelf_id
      - storage_name
      - storages
      - weight
    ProductStorageTransfer:
      type: object
      properties:
        storage:
          type: integer
        products:
          type: array
          items:
            type: integer
      required:
      - products
      - storage
    ProductUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        modify_date:
          type: string
        available:
          type: boolean
        barcode:
          type: string
          maxLength: 255
        group_id:
          type: string
          maxLength: 255
        name:
          type: string
          maxLength: 255
        price:
          type: number
          format: double
        shelf_id:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        free_description:
          type: string
        date:
          type: string
          format: date-time
          readOnly: true
        modified_date:
          type: string
          format: date-time
        measurements:
          type: string
          maxLength: 50
        weight:
          type: number
          format: double
        category:
          type: integer
          nullable: true
        storages:
          type: integer
          nullable: true
        color:
          type: integer
          nullable: true
        pictures:
          type: array
          items:
            type: integer
      required:
      - date
      - id
      - name
    ShoppingCart:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
      required:
      - date
      - id
      - products
      - user
    ShoppingCartAvailableAmountList:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: integer
      required:
      - amount
      - id
    ShoppingCartDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          readOnly: true
        date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
      required:
      - date
      - id
      - products
      - user
    ShoppingCartDetailRequest:
      type: object
      properties:
        products:
          type: integer
        amount:
          type: integer
      required:
      - amount
      - products
    ShoppingCartResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        date:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          nullable: true
        products:
          type: array
          items:
            type: integer
      required:
      - date
      - id
      - products
      - user
    State28bEnum:
      enum:
      - WAITING
      - BEING_PROCESSED
      - ACTIVE
      type: string
      description: |-
        * `WAITING` - Waiting
        * `BEING_PROCESSED` - Being Processed
        * `ACTIVE` - Active
    State6acEnum:
      enum:
      - AVAILABLE
      - MAINTENANCE
      - RENTED
      - RETIRED
      type: string
      description: |-
        * `AVAILABLE` - Available
        * `MAINTENANCE` - Maintenance
        * `RENTED` - Rented
        * `RETIRED` - Retired
    StatusEnum:
      enum:
      - Not read
      - Read
      - Handled
      type: string
      description: |-
        * `Not read` - Not Read
        * `Read` - Read
        * `Handled` - Handled
    Storage:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        address:
          type: string
          maxLength: 255
        in_use:
          type: boolean
      required:
      - address
      - id
      - name
    SubSerializerForGroupsSchema:
      type: object
      description: Serializer for getting group names from users
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 150
      required:
      - id
      - name
    UserAddress:
      type: object
      description: Serializer for user address
      properties:
        id:
          type: integer
          readOnly: true
        address:
          type: string
          maxLength: 255
        zip_code:
          type: string
          maxLength: 10
        city:
          type: string
          maxLength: 100
        user:
          type: integer
      required:
      - address
      - city
      - id
      - user
      - zip_code
    UserAddressPostRequest:
      type: object
      description: Serializer mainly for schema purpose, fields required for creating
        address for user
      properties:
        id:
          type: integer
          readOnly: true
        address:
          type: string
          maxLength: 255
        zip_code:
          type: string
          maxLength: 10
        city:
          type: string
          maxLength: 100
      required:
      - address
      - city
      - id
      - zip_code
    UserAddressPutRequest:
      type: object
      description: |-
        Serializer mainly for schema purpose, removing the required tag and adding id
        id = the id number of address being changed
      properties:
        id:
          type: integer
        address:
          type: string
          maxLength: 255
        zip_code:
          type: string
          maxLength: 10
        city:
          type: string
          maxLength: 100
      required:
      - id
    UserCreate:
      type: object
      description: Serializer for users, in specific format for user creation
      properties:
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 155
        email:
          type: string
          maxLength: 255
        phone_number:
          type: string
          maxLength: 50
        password:
          type: string
          maxLength: 128
        username:
          type: string
          maxLength: 255
        address:
          type: string
          maxLength: 255
        zip_code:
          type: string
          maxLength: 10
        city:
          type: string
          maxLength: 100
      required:
      - address
      - city
      - email
      - first_name
      - last_name
      - password
      - phone_number
      - username
      - zip_code
    UserCreateReturnResponseSchema:
      type: object
      description: FOR SCHEMA, Serializer for users, in specific format for user creation
      properties:
        first_name:
          type: string
          maxLength: 100
        last_name:
          type: string
          maxLength: 155
        email:
          type: string
          maxLength: 255
        phone_number:
          type: string
          maxLength: 50
        message:
          type: string
          maxLength: 255
      required:
      - email
      - first_name
      - last_name
      - message
      - phone_number
    UserFullResponseSchema:
      type: object
      description: FOR SCHEMA, Serializer for users, all database fields
      properties:
        id:
          type: integer
          readOnly: true
        address_list:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
          readOnly: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/SubSerializerForGroupsSchema'
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          nullable: true
          maxLength: 255
        email:
          type: string
          maxLength: 255
        creation_date:
          type: string
          format: date-time
          readOnly: true
        phone_number:
          type: string
          nullable: true
          maxLength: 255
        username:
          type: string
          maxLength: 255
        is_active:
          type: boolean
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
      required:
      - address_list
      - creation_date
      - email
      - groups
      - id
      - is_active
      - last_login
      - name
      - phone_number
      - username
    UserLoginPost:
      type: object
      description: needed login information
      properties:
        username:
          type: string
          maxLength: 255
        password:
          type: string
          maxLength: 128
      required:
      - password
      - username
    UserPasswordChangeEmailValidation:
      type: object
      properties:
        uid:
          type: string
          maxLength: 255
        token:
          type: string
          maxLength: 255
        new_password:
          type: string
          maxLength: 255
        new_password_again:
          type: string
          maxLength: 255
      required:
      - new_password
      - new_password_again
      - token
      - uid
    UserPasswordCheckEmail:
      type: object
      properties:
        username:
          type: string
          maxLength: 255
      required:
      - username
    UserTokenValidation:
      type: object
      description: Serializer for user activation validations.
      properties:
        uid:
          type: string
          maxLength: 255
        token:
          type: string
          maxLength: 255
      required:
      - token
      - uid
    UserUpdate:
      type: object
      description: Serializer for users, for updating user information
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 255
    UserUpdateReturnSchema:
      type: object
      description: FOR SCHEMA, Serializer for users, for updating user information
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        phone_number:
          type: string
          nullable: true
          maxLength: 255
      required:
      - name
      - phone_number
    UsersLoginRefreshResponseSchema:
      type: object
      description: |-
        FOR SCHEMA
        Serializer for return data when logging in and refreshing.
        pass message in context.
      properties:
        message:
          type: string
          maxLength: 255
        username:
          type: string
          maxLength: 255
        groups:
          type: array
          items:
            type: string
          readOnly: true
      required:
      - groups
      - message
      - username
  securitySchemes:
    CustomJWTAuthentication:
      type: apiKey
      in: cookie
      name: access_token
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
